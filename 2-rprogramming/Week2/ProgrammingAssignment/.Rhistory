x <- 10
x
x <- c(1:10)
x
x <- 10
x
x <- c(1:10)
x <- seq(1,10,2)
??seq
?seq
y c(1:3,NA,NA,6:10)
y <- c(1:3,NA,NA,6:10)
x+y
vec4 <- rep(5,10)
vec4[-5]
vec1[-5]
vec1 <- 1:10
vec1[-5]
xz <- 1:10
xz[c(T,F)]
xz <- 1:10
xz[c(T,F)]
xz[c(T,F,T,T)]
xz[xz > 5]
names <- c("xyz","blah","blahblah")
names[names %in% c("xyz")]
names[names %in% "xyz"]
names[grepl("xy",names)]
grepl("xy",names)
grep("xy",names)
x <- c(1:5,NA)
sum(x)
sum(x,na.rm)
sum(x,na.rm = T)
mat <- matrix(5:20, nrow=4)
mat[3,4]
mat[,2]
mat[2:3,3;4]
mat[2:3,3:4]
install.packages("tidyr")
install.packages(c("ggplot2", "dplyr", "lubridate"))
clear
install.packages("glm2")
library(glm2)
pwd()
pwd
str(Titanic)
tree <- rpart(Survived ~., data = Titanic,method="class")
library(rpart)
tree <- rpart(Survived ~., data = Titanic,method="class")
pred = predict(tree, Titanic, type="class")
table(Survived,pred)
table(Titanic$Survived,pred)
table(Titanic$Survived,pred)
table(Titanic,pred)
table(Titanic$Survived, pred)
summary(Titanic)
table(Titanic$Survived, pred)
Titanic$Survived
Titanic
str(Titanic)
source('~/.active-rstudio-document', echo=TRUE)
# Your train and test set are loaded
train = read.csv("C:\Users\vd14822\Downloads\train-rateit.csv")
test = read.csv("C:\Users\vd14822\Downloads\test-rateit.csv")
# Load in the R package
library(rpart)
# Build the decision tree
tree = rpart(target_bin~., data = train, method = "class", control=rpart.control(minsplit=1, minbucket=1, cp=0.001))
# Visualize the decision tree using plot() and text()
plot(tree)
text(tree)
# Load in the packages to build a fancy plot
library(rattle)
library(rpart.plot)
library(RColorBrewer)
# Time to plot your fancy tree
fancyRpartPlot(tree)
# Make predictions on the test set
my_prediction <- predict(tree, newdata = test, type = "class")
# Finish the data.frame() call
my_solution <- data.frame(PassengerId = test$content_id, Survived = my_prediction)
# Use nrow() on my_solution
nrow(my_solution)
# Finish the write.csv() call
write.csv(my_solution, file = "C:\Users\vd14822\Downloads\my_solution.csv", row.names = FALSE)
train = read.csv("C:\Users\vd14822\Downloads\train-rateit.csv")
# Your train and test set are loaded
train = read.csv("C:\\Users\\vd14822\\Downloads\\train-rateit.csv")
test = read.csv("C:\\Users\\vd14822\Downloads\\test-rateit.csv")
# Load in the R package
library(rpart)
# Build the decision tree
tree = rpart(target_bin~., data = train, method = "class", control=rpart.control(minsplit=1, minbucket=1, cp=0.001))
# Visualize the decision tree using plot() and text()
plot(tree)
text(tree)
# Load in the packages to build a fancy plot
library(rattle)
library(rpart.plot)
library(RColorBrewer)
# Time to plot your fancy tree
fancyRpartPlot(tree)
# Make predictions on the test set
my_prediction <- predict(tree, newdata = test, type = "class")
# Finish the data.frame() call
my_solution <- data.frame(PassengerId = test$content_id, Survived = my_prediction)
# Use nrow() on my_solution
nrow(my_solution)
# Finish the write.csv() call
write.csv(my_solution, file = "C:\\Users\\vd14822\\Downloads\\my_solution.csv", row.names = FALSE)
# Your train and test set are loaded
train = read.csv("C:\\Users\\vd14822\\Downloads\\train-rateit.csv")
test = read.csv("C:\\Users\\vd14822\\Downloads\\test-rateit.csv")
# Load in the R package
library(rpart)
# Build the decision tree
tree = rpart(target_bin~., data = train, method = "class", control=rpart.control(minsplit=1, minbucket=1, cp=0.001))
# Visualize the decision tree using plot() and text()
plot(tree)
text(tree)
# Load in the packages to build a fancy plot
library(rattle)
library(rpart.plot)
library(RColorBrewer)
# Time to plot your fancy tree
fancyRpartPlot(tree)
# Make predictions on the test set
my_prediction <- predict(tree, newdata = test, type = "class")
# Finish the data.frame() call
my_solution <- data.frame(PassengerId = test$content_id, Survived = my_prediction)
# Use nrow() on my_solution
nrow(my_solution)
# Finish the write.csv() call
write.csv(my_solution, file = "C:\\Users\\vd14822\\Downloads\\my_solution.csv", row.names = FALSE)
# Your train and test set are loaded
train = read.csv("C:\\Users\\vd14822\\Downloads\\train-rateit.csv")
test = read.csv("C:\\Users\\vd14822\\Downloads\\test-rateit.csv")
# Load in the R package
library(rpart)
# Build the decision tree
tree = rpart(target_bin~., data = train, method = "class", control=rpart.control(minsplit=1, minbucket=1, cp=0.001))
# Visualize the decision tree using plot() and text()
plot(tree)
text(tree)
# Load in the packages to build a fancy plot
library(rattle)
library(rpart.plot)
library(RColorBrewer)
# Time to plot your fancy tree
fancyRpartPlot(tree)
# Make predictions on the test set
my_prediction <- predict(tree, newdata = test, type = "class")
# Finish the data.frame() call
my_solution <- data.frame(content_id = test$content_id, target_bin = my_prediction)
# Use nrow() on my_solution
nrow(my_solution)
# Finish the write.csv() call
write.csv(my_solution, file = "C:\\Users\\vd14822\\Downloads\\my_solution.csv", row.names = FALSE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source("pollutantmean.R")
pollutentmean <- function(directory,pollutant, id=1:332){
files = list.files(path=directory, full.names = TRUE, recursive = TRUE)
data <- data.frame()
for(i in id){
data <- rbind(data, read.csv(files[i]))
}
mean(data[,pollutant], na.rm=TRUE)
}
setwd(C:\Users\vd14822\Desktop\coursera jhu\rprogramming\Week2)
setwd(C:\\Users\\vd14822\\Desktop\\coursera jhu\\rprogramming\\Week2)
setwd("C:\\Users\\vd14822\\Desktop\\coursera jhu\\rprogramming\\Week2")
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutentmean <- function(directory,pollutant, id=1:332){
files = list.files(path=directory, full.names = TRUE, recursive = TRUE)
data <- data.frame()
for(i in id){
data <- rbind(data, read.csv(files[i]))
}
mean(data[,pollutant], na.rm=TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("complete.R")
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
source("corr.R")
cr <- corr("specdata", 150)
cr <- corr("specdata", 150)
warnings()
cr <- corr("specdata", 150)
warnings()
source("corr.R")
cr <- corr("specdata", 150)
warnings()
warnings()
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
